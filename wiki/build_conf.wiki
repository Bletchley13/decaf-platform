=Startup=
      This part is a quick start guide for setting up and running DECAF, the binary analysis platform based on [http://wiki.qemu.org/Main_Page QEMU]. It assumes that you have some familiarity with Linux. The instructions are based on the release of DECAF shown in the [http://code.google.com/p/decaf-platform/source/checkout svn] or the [http://code.google.com/p/decaf-platform/downloads/detail?name=DECAF.tar.gz#makechanges downloads page], running on a Ubuntu 12.04 distribution of Linux. We intermix instructions with explanations about utilities to give an overview of how things work.
     We also provide *[http://sycurelab.ecs.syr.edu/image/decaf.tar.gz a Virtual Box image]* which has DECAF installed. You can use it directly. But you still need to create your own qemu VM.
 ==1. Compile==
 # DECAF is based on QEMU. It's useful to have a vanilla QEMU for testing and image development. Also, you need to install some stuff to compile qemu/decaf.
{{{
sudo apt-get install qemu
sudo apt-get build-dep qemu
}}}
 # Before compile, you need to install the following libraries.
{{{
# For the BFD library:
sudo apt-get install binutils-dev
}}}
 # Configure&Make
DECAF has two basic settings. One is TCG tainting, another one is VMI. You can enable/disable at the configuration step. By default, VMI is enabled and TCG tainting is disabled. 
{{{
#go to the root directory of DECAF's source folder.
./configure
make
}}}

Enable TCG tainting
{{{
#go to the root directory of DECAF's source folder.
./configure --enable-tcg-taint
make
}}}
Enable TCG IR logging
{{{
#go to the root directory of DECAF's source folder
./configure --enable-tcg-ir-log
make
}}}
Disable VMI
VMI is enabled by default. If you disable it, DECAF cannot retrieve os-level semantics although you have guest driver installed because we have removed the support for guest driver(TEMU does VMI this way).
{{{
#go to the root directory of DECAF's source folder.
./configure --disable-vmi
make
}}}
 ==2. Create a new VM==
      While QEMU itself is compatible with almost any guest OS that runs on x86 hardware, DECAF requires more knowledge about the OS to bridge the semantic gap and provide information about OS abstractions like processes. DECAF currently supports Windows XP, Windows 7 and Linux, in order to use our tool, user has to have a working qemu image of the operating system. As how to make a qemu image,please see [http://people.gnome.org/~markmc/qcow-image-format.html QCOW2 image Format]. 
 # If you have a vmdk image(used by vmware),you can convert it to qcow2 format by:
{{{
qemu-img convert win2kpro.vmdk -O qcow win2kpro.img
}}}
 # if you have a vdi image(used by virtualBox),yo can convert it to qcow2 format by:
{{{
VBoxManage clonehd --format RAW img.vdi img.raw
qemu-img convert -f raw ubuntu.img -O qcow2 ubuntu.qcow
}}}
 # With the new VMI support, guest driver is no longer needed by DECAF. 

 ==3. Startup the Virtual Machine==
    Now you have get everything ready, the next step is to start the emulator and run the virtual machine.
 # Go to DECAF/trunk/i386-­softmmu
 # Run the following command
{{{
./qemu-­system­-i386 -­monitor stdio ­-m 512 ­-netdev user,id=mynet ­-device rtl8139,netdev=mynet “YOUR_IMAGE”
}}}
 # If you want to use snapshot function, you can use ­snapshot option
 ==4. compile and load plugins==
    DECAF provides many interfaces to trace internal events of the guest operating system. You can write your analysis plugins using these interfaces. To learn how to write plugins, [http://code.google.com/p/decaf-platform/downloads/detail?name=decaf_plugins.tar.gz#makechanges  plugin samples] is the best place to start with. Download [http://code.google.com/p/decaf-platform/downloads/detail?name=decaf_plugins.tar.gz#makechanges  plugin samples]. Take callbacktests plugin as an example.
 # compile plugins
{{{
cd ./callbacktests
#set decaf location
./configure --decaf-path=root directory of decaf
make
}}}
 # load plugins
{{{
#start virtual machine, change directory to (root directory of decaf)/i386-softmmu/
 ./qemu-­system­-i386 -­monitor stdio -­m 512 ­-netdev user,id=mynet -­device rtl8139,netdev=mynet “YOUR_IMAGE”
#check available cmds
help
#load plugins
load_plugin XXX/callbacktests/callbacktests.so
}}}
 # trace program
{{{
#trace a specific program
do_callbacktests calc.exe
#now you can start calc.exe in the guest operating system to see the results. 
}}}
 ==5. Troubleshooting==
This section describes some problems users have experienced when using DECAF, along with the most common causes of these problems.If you have any other questions,please post them on [http://groups.google.com/group/decaf-platform-discuss Forum]

 # *After start Decaf, the terminal says " vnc server running on 127.0.0.1 7 5900" and there is no running guest os shown up.*
  * This is because SDL library is not properly installed. You just need to reinstall SDL.
 # *When compile plugin, it can not find lcrypto.*
  * you need to make a link to lcrypto.xxx.so to lcrypto.so. If you can not find lcrypto.xxx.so library,just install ssh.






 