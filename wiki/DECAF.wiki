=1. Introduction=
DECAF is a multi-target binary analysis platform, but it is easier to think of it as a platform for target-independent binary analysis. The core idea is to abstract away the details of different targets, (e.g. the program counter register in x86 [EIP] contains the virtual address of the current instruction being executed while the same register in ARM [PC] points to the next instruction) so that the analyst can focus on doing important work (analyzing) (e.g. in DECAF there is one function DECAF_getCurPC that returns the address of the instruction being executed and target specific functions to obtain the register values). 

In this way all you (the analyst) have to do is register for different events, such as "block begin" or "instruction begin" or "system call", and we will deal with making the changes to the different targets of the QEMU Processor Emulator so that you get those events at the appropriate times. You can then write target-independent plugins such as API tracer or target-dependent plugins such as X86InstructionTracer and ARMInstructionTracer.

Following a similar philosophy, DECAF also provides multiple virtual machine introspection facilities so that no matter if the guest machine is Windows or Linux, the analyst will still be able to readily obtain a shadow process list, among other things.

=2. Installation=
      This part is a quick start guide for setting up and running DECAF, the binary analysis platform based on [http://wiki.qemu.org/Main_Page QEMU]. It assumes that you have some familiarity with Linux. The instructions are based on the release of DECAF shown in the [http://code.google.com/p/decaf-platform/source/checkout svn] or the [http://code.google.com/p/decaf-platform/downloads/detail?name=DECAF.tar.gz#makechanges downloads page], running on a Ubuntu 12.04 distribution of Linux. We intermix instructions with explanations about utilities to give an overview of how things work. The goal in this exercise is to take a simple plugin called recon as example, with that, you can list all the symbols, dlls and other information of the system.
==2.1 Compile==
#DECAF is based on QEMU. It's useful to have a vanilla QEMU for testing and image development. Also, you need to install some stuff to compile qemu/decaf.
{{{
sudo apt-get install qemu
sudo apt-get build-dep qemu
}}}
#Before compile, you need to install the following libraries.
*zlib*
Download latest version of zlib (1.2.7 currently) from http://www.zlib.net/ then untar it and run following commands
{{{
./configure
make install
}}}
­ *glib
run the following command to install the glib
{{{
sudo apt­get install libglib2.0­dev
}}}
­*g++*
run the following command to install g++
{{{
sudo apt­get install g++ multilib
}}}


 